meta {
    openapi: '3.0.1'
    info: {
        version: '1.0.0'
        title: 'Simple DSL Demo'
        description: 'Samples for all features of OpenAPI DSL'
        termsOfService: 'http://swagger.io/terms/'
        contact: {
            name: 'BestSolution.at'
            email: 'info@bestsolution.at'
            url: 'https://github.com/BestSolution-at/openapi-dsl'
        }
        license: {
            name: 'MIT'
        }
    }
    servers: [
        {
            url: "http://localhost:8080"
        }
    ]
}

types {
    alias LIMIT = integer(int32)(0,100]
    alias WEIGHT = number(double)(0,1000]

    type NewPet {
        name: string
        weight: WEIGHT
    }
    type Pet extends NewPet {
        id: int64
    }
    type Car(_type='car') {
        id: string
        seats: int32
    }
    type Bike(_type='bike') {
        id: string
        gears: integer(int32)[0,21]
    }
    union Vehicle = Car | Bike

    type Movie {
        id: string
        actors: array<Actor>
    }

    type Actor {
        id: string
        firstname: string
        lastname: string
        birthday: date
        size: double
    }

    type Error {
        code: int32
        message: string
    }
}

endpoints {
    PetResource at '/pets' {
        '' {
            get findPets(query limit?: LIMIT) =>
                200: array<Pet,100>
                default: Error
            post createPet(body pet: NewPet) =>
                200: Pet
                default: Error
        }
        '/{id}' {
            get findPetById(path id: int64) =>
                200
                default: Error
            delete deletePet(path id: string) =>
                204
                default: Error
        }
    }
}